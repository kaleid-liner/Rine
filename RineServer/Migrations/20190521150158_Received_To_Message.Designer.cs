// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RineServer.Models;

namespace RineServer.Migrations
{
    [DbContext(typeof(RineServerContext))]
    [Migration("20190521150158_Received_To_Message")]
    partial class Received_To_Message
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RineServer.Models.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Accepted");

                    b.Property<DateTime?>("Actioned");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UserRecvId");

                    b.Property<int>("UserRequestId");

                    b.HasKey("Id");

                    b.HasIndex("UserRecvId");

                    b.HasIndex("UserRequestId");

                    b.ToTable("Friendship");
                });

            modelBuilder.Entity("RineServer.Models.RineMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<bool>("Received");

                    b.Property<int?>("ReceiverId");

                    b.Property<int?>("SenderId");

                    b.Property<DateTime>("Sent")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("RineMessage");
                });

            modelBuilder.Entity("RineServer.Models.RineUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("RineUser");
                });

            modelBuilder.Entity("RineServer.Models.Friendship", b =>
                {
                    b.HasOne("RineServer.Models.RineUser", "UserRecv")
                        .WithMany("FriendRecv")
                        .HasForeignKey("UserRecvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RineServer.Models.RineUser", "UserRequest")
                        .WithMany("FriendRequest")
                        .HasForeignKey("UserRequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RineServer.Models.RineMessage", b =>
                {
                    b.HasOne("RineServer.Models.RineUser", "Receiver")
                        .WithMany("Inbox")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("RineServer.Models.RineUser", "Sender")
                        .WithMany("Outbox")
                        .HasForeignKey("SenderId");
                });
#pragma warning restore 612, 618
        }
    }
}
